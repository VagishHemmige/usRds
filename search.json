[{"path":"https://vagishhemmige.github.io/usRds/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Vagish Hemmige Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"prerequisite-set-the-working-directory","dir":"Articles","previous_headings":"","what":"Prerequisite: Set the Working Directory","title":"Using usRds to access data within the USRDS file system","text":"examples assume already set working directory :","code":"set_USRDS_wd(\"/path/to/usrds_data\")"},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"option-1-general-file-loader","dir":"Articles","previous_headings":"","what":"Option 1: General File Loader","title":"Using usRds to access data within the USRDS file system","text":"can load recognized USRDS file using: function : Locate file using internal variables created package loaded set_USRDS_wd() run Use .parquet available, falling back .sas7bdat .csv Read file using best available method format can also use col_select choose specific variables, usrds_ids filter patient. Set factor_labels = TRUE var_labels = TRUE apply value variable labels:","code":"df <- load_usrds_file(file_key = \"PATIENTS\", year = 2006)"},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"labeling-options","dir":"Articles","previous_headings":"Option 1: General File Loader","what":"Labeling Options","title":"Using usRds to access data within the USRDS file system","text":"load_usrds_file() function supports two options enriching data documentation USRDS Researcher’s Guide: factor_labels = TRUE applies value labels (e.g., turning codes like \"1\" \"Male\") using Appendix C. var_labels = TRUE attaches human-readable variable descriptions (\"label\" attribute) using Appendix B. options help make raw USRDS data easier interpret. see files available:","code":"# Apply both value and variable labels df <- load_usrds_file(\"RXHIST\", factor_labels = TRUE, var_labels = TRUE) list_available_usrds_files(\"IN\")"},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"option-2-filtered-extractors-get_-functions-for-institutional-and-physiciansupplier-files","dir":"Articles","previous_headings":"","what":"Option 2: Filtered Extractors (get_*() Functions) for Institutional and Physician/Supplier Files","title":"Using usRds to access data within the USRDS file system","text":"usRds package includes purpose-built extractor functions designed read filter commonly used USRDS claims files. functions optimized performance usability, automatically handling file formats filtering load.","code":""},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"available-functions","dir":"Articles","previous_headings":"Option 2: Filtered Extractors (get_*() Functions) for Institutional and Physician/Supplier Files","what":"Available Functions","title":"Using usRds to access data within the USRDS file system","text":"get_IN_ICD() – diagnoses institutional claims get_IN_HCPCS() – HCPCS procedure codes institutional claims get_PS_ICD() – diagnoses physician/supplier claims get_PS_HCPCS() – HCPCS procedure codes physician/supplier claims","code":""},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"key-arguments","dir":"Articles","previous_headings":"Option 2: Filtered Extractors (get_*() Functions) for Institutional and Physician/Supplier Files","what":"Key Arguments","title":"Using usRds to access data within the USRDS file system","text":"get_*() functions share following arguments: icd_codes hcpcs_codes: character vector diagnosis procedure codes filter. NULL, codes returned. years: numeric vector years include (e.g., 2006, 2006:2008) usrds_ids (optional): character numeric vector USRDS_IDs filter specific cohort. omitted, IDs included.","code":""},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"examples","dir":"Articles","previous_headings":"Option 2: Filtered Extractors (get_*() Functions) for Institutional and Physician/Supplier Files","what":"Examples","title":"Using usRds to access data within the USRDS file system","text":"get_*() function: Automatically uses .parquet files available best performance Falls back .sas7bdat .csv needed Applies filtering inline efficiency Accepts optional filtering usrds_ids codes functions optimized format file. Parquet files provide fastest performance, especially large-scale extraction.","code":"# Example: Extract ICD-9 codes from institutional claims dx <- get_IN_ICD(icd_codes = c(\"042\", \"V08\"), years = 2006:2007)  # Example: Extract HCPCS code \"81003\" from physician/supplier claims ps <- get_PS_HCPCS(hcpcs_codes = \"81003\", years = 2006)  # Example: Filter to a specific cohort of patients subset <- get_PS_ICD(   icd_codes = \"25000\",   years = 2012,   usrds_ids = c(\"100001234\", \"100005678\") )"},{"path":"https://vagishhemmige.github.io/usRds/articles/accessing-files.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Using usRds to access data within the USRDS file system","text":"Use load_usrds_file() unfiltered access raw data Use get_*() functions fast, focused queries diagnosis procedure code functions optimized available file type, Parquet preferred maximum speed","code":""},{"path":"https://vagishhemmige.github.io/usRds/articles/getting-started.html","id":"supported-file-formats","dir":"Articles","previous_headings":"","what":"Supported File Formats","title":"Getting Started with the usRds Package","text":"package works : .sas7bdat — standard SAS format used official USRDS datasets .csv — used earlier years alternate distributions .parquet — efficient columnar format fast scalable access multiple versions file present, .parquet prioritized automatically.","code":""},{"path":"https://vagishhemmige.github.io/usRds/articles/getting-started.html","id":"why-use-parquet-optional","dir":"Articles","previous_headings":"","what":"Why Use Parquet? (Optional)","title":"Getting Started with the usRds Package","text":"Working large SAS CSV files can slow memory-intensive. Parquet offers major performance storage benefits: Parquet advantages include: Much faster loading arrow::read_parquet() Smaller file sizes (typically 3–8× smaller) Selective column access minimize memory usage Modern compatibility tools like Arrow DuckDB","code":""},{"path":"https://vagishhemmige.github.io/usRds/articles/getting-started.html","id":"step-1-optional-convert-to-parquet","dir":"Articles","previous_headings":"","what":"Step 1 (Optional): Convert to Parquet","title":"Getting Started with the usRds Package","text":"’d like take advantage benefits, convert SAS CSV files Parquet setting working directory: : Look files based .usrds_env$file_list Automatically detect whether input CSV SAS Save .parquet versions directory source Skip conversion .parquet files already exist (unless overwrite = TRUE)","code":"library(usRds)  convert_USRDS_to_parquet(   file_key = \"IN\",   years = 2006:2012,   overwrite = FALSE )"},{"path":"https://vagishhemmige.github.io/usRds/articles/getting-started.html","id":"example-folder-structure-after-conversion","dir":"Articles","previous_headings":"Step 1 (Optional): Convert to Parquet","what":"Example Folder Structure After Conversion","title":"Getting Started with the usRds Package","text":"","code":"/path/to/usrds_data/ ├── 5) ESRD Institution/ │   ├── IN2006/ │   │   ├── in2006a.sas7bdat │   │   └── in2006a.parquet"},{"path":"https://vagishhemmige.github.io/usRds/articles/getting-started.html","id":"step-2-set-the-usrds-working-directory","dir":"Articles","previous_headings":"","what":"Step 2: Set the USRDS Working Directory","title":"Getting Started with the usRds Package","text":"data (format) prepared, register path : make setting persist across sessions: working directory used downstream functions locate USRDS files.","code":"set_USRDS_wd(\"/path/to/usrds_data\") set_USRDS_wd(\"/path/to/usrds_data\", permanent = TRUE)"},{"path":"https://vagishhemmige.github.io/usRds/articles/getting-started.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Getting Started with the usRds Package","text":"begin using usRds: (Optional) Convert raw files Parquet using convert_USRDS_to_parquet() Set working directory set_USRDS_wd() Proceed next vignette filtering extracting claims data get_*() functions. vignette starting point streamlined, reproducible access USRDS data R. See additional vignettes documentation advanced cohort building labeling features.","code":""},{"path":"https://vagishhemmige.github.io/usRds/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vagish Hemmige. Author, maintainer. Cervera Hernandez Miguel. Contributor.","code":""},{"path":"https://vagishhemmige.github.io/usRds/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hemmige V (2025). usRds: Package Automate Processing Access USRDS. R package version 0.1.0, https://github.com/VagishHemmige/usRds.","code":"@Manual{,   title = {usRds: A Package to Automate Processing and Access to the USRDS},   author = {Vagish Hemmige},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/VagishHemmige/usRds}, }"},{"path":"https://vagishhemmige.github.io/usRds/index.html","id":"usrds","dir":"","previous_headings":"","what":"A Package to Automate Processing and Access to the USRDS","title":"A Package to Automate Processing and Access to the USRDS","text":"prototype R package facilitate analysis United States Renal Data System using R, “usRds”. package assumes user already obtained data USRDS system, files CSV, SAS, parquet format. install package, type following R: ‘devtools::install_github(“VagishHemmige/usRds”)’ need use set_USRDS_wd() function establish directory USRDS files stored: following functions used extract claims diagnosis data USRDS files: get_IN_HCPCS() — Extract inpatient claims specified HCPCS codes get_IN_ICD() — Extract inpatient claims specified ICD diagnosis codes get_PS_ICD() — Extract Physician Supplier claims ICD codes get_PS_HCPCS() — Extract Physician Supplier claims HCPCS codes function searches across supported file formats (.csv, .sas7bdat, .parquet) filters efficiently year code list. See Function Reference full documentation. Much , including help files, vignettes, etc. coming soon!","code":"library(usRds)  # Session only: set_USRDS_wd(\"C:/Path/To/USRDS\")  # Or set permanently: set_USRDS_wd(\"C:/Path/To/USRDS\", permanent = TRUE)"},{"path":"https://vagishhemmige.github.io/usRds/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Package to Automate Processing and Access to the USRDS","text":"can install development version usRds GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"VagishHemmige/usRds\")"},{"path":"https://vagishhemmige.github.io/usRds/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Package to Automate Processing and Access to the USRDS","text":"basic example shows solve common problem:","code":"library(usRds) ## basic example code"},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply USRDS factor labels to a data frame — apply_usrds_factors","title":"Apply USRDS factor labels to a data frame — apply_usrds_factors","text":"Given loaded USRDS dataset corresponding file key (e.g., \"PATIENTS\", \"RXHIST\"), function uses internal metadata convert numerically coded variables factors using value mappings Appendix C USRDS Researcher's Guide.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply USRDS factor labels to a data frame — apply_usrds_factors","text":"","code":"apply_usrds_factors(df, file_key, verbose = FALSE)"},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply USRDS factor labels to a data frame — apply_usrds_factors","text":"df data frame loaded USRDS file. file_key Character. canonical file key (e.g., \"PATIENTS\"). verbose Logical. TRUE, print variable labeled.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply USRDS factor labels to a data frame — apply_usrds_factors","text":"data frame factor variables applied applicable.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_factors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply USRDS factor labels to a data frame — apply_usrds_factors","text":"Variable formats looked Appendix B. variables formats beginning dollar sign (e.g., $REMCD.) present dataset converted.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply USRDS factor labels to a data frame — apply_usrds_factors","text":"","code":"if (FALSE) { # \\dontrun{ df <- load_usrds_file(\"PATIENTS\", factor_labels = TRUE) } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_varlabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply USRDS variable labels to a data frame — apply_usrds_varlabels","title":"Apply USRDS variable labels to a data frame — apply_usrds_varlabels","text":"Adds descriptive variable labels using Appendix B USRDS Researcher's Guide. Variable labels applied using labelled package.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_varlabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply USRDS variable labels to a data frame — apply_usrds_varlabels","text":"","code":"apply_usrds_varlabels(df, file_key, verbose = FALSE)"},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_varlabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply USRDS variable labels to a data frame — apply_usrds_varlabels","text":"df data frame loaded USRDS file. file_key Character. canonical file key (e.g., \"PATIENTS\"). verbose Logical. TRUE, prints variable labeled.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_varlabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply USRDS variable labels to a data frame — apply_usrds_varlabels","text":"data frame variable labels added (invisible via print, viewable via labelled::var_label()).","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/apply_usrds_varlabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply USRDS variable labels to a data frame — apply_usrds_varlabels","text":"","code":"if (FALSE) { # \\dontrun{ df <- load_usrds_file(\"PATIENTS\", var_labels = TRUE) labelled::var_label(df$CDEATH) } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/convert_usrds_to_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert all USRDS raw files in a directory to Parquet — convert_usrds_to_parquet","title":"Convert all USRDS raw files in a directory to Parquet — convert_usrds_to_parquet","text":"Converts .csv .sas7bdat files source directory .parquet files, preserving relative folder structure. Uses Arrow read convert data.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/convert_usrds_to_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert all USRDS raw files in a directory to Parquet — convert_usrds_to_parquet","text":"","code":"convert_usrds_to_parquet(source_dir, target_dir, overwrite = FALSE)"},{"path":"https://vagishhemmige.github.io/usRds/reference/convert_usrds_to_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert all USRDS raw files in a directory to Parquet — convert_usrds_to_parquet","text":"source_dir Root directory raw USRDS files. target_dir Root directory .parquet output. overwrite Logical. Overwrite existing output files?","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/convert_usrds_to_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert all USRDS raw files in a directory to Parquet — convert_usrds_to_parquet","text":"Invisibly returns tibble source target file paths.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/dot-map_USRDS_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: Map USRDS data files in the working directory — .map_USRDS_files","title":"Internal: Map USRDS data files in the working directory — .map_USRDS_files","text":"Scans directory set USRDS_WD environment variable stores cleaned file list package's internal environment downstream use.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/dot-map_USRDS_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: Map USRDS data files in the working directory — .map_USRDS_files","text":"","code":".map_USRDS_files()"},{"path":"https://vagishhemmige.github.io/usRds/reference/dot-map_USRDS_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal: Map USRDS data files in the working directory — .map_USRDS_files","text":"function intended internal use automatically run package load USRDS_WD set.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/dot-usrds_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal environment for package-level state — .usrds_env","title":"Internal environment for package-level state — .usrds_env","text":"environment used store internal session-specific state, file list loaded map_USRDS_files(). exported accessed directly users.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/dot-usrds_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal environment for package-level state — .usrds_env","text":"","code":".usrds_env"},{"path":"https://vagishhemmige.github.io/usRds/reference/dot-usrds_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Internal environment for package-level state — .usrds_env","text":"object class environment length 1.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_HCPCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Institutional HCPCS Claims — get_IN_HCPCS","title":"Retrieve Institutional HCPCS Claims — get_IN_HCPCS","text":"Searches institutional claim files specified HCPCS codes specified years. Supports filtering HCPCS optionally USRDS_IDs. Handles CSV, SAS, Parquet formats.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_HCPCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Institutional HCPCS Claims — get_IN_HCPCS","text":"","code":"get_IN_HCPCS(hcpcs_codes = NULL, years, usrds_ids = NULL)"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_HCPCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Institutional HCPCS Claims — get_IN_HCPCS","text":"hcpcs_codes Optional character vector HCPCS codes search . NULL, codes returned. years Integer vector years include. usrds_ids Optional vector USRDS_IDs filter specific patients.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_HCPCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Institutional HCPCS Claims — get_IN_HCPCS","text":"data frame columns: USRDS_ID, CLM_FROM, HCPCS, REV_CH","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_HCPCS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Institutional HCPCS Claims — get_IN_HCPCS","text":"hcpcs_codes NULL, HCPCS-coded claims returned.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_HCPCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Institutional HCPCS Claims — get_IN_HCPCS","text":"","code":"if (FALSE) { # \\dontrun{ get_IN_HCPCS(c(\"J1234\", \"A4567\"), years = 2012:2016) get_IN_HCPCS(NULL, years = 2012:2016)  # All HCPCS claims } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_ICD.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve diagnosis codes from Institutional claims — get_IN_ICD","title":"Retrieve diagnosis codes from Institutional claims — get_IN_ICD","text":"Extracts claims containing specified ICD-9 ICD-10 diagnosis codes institutional billing data selected years. data may stored CSV, SAS, Parquet format. function automatically loads combines matching files can optionally filter subset USRDS_IDs.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_ICD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve diagnosis codes from Institutional claims — get_IN_ICD","text":"","code":"get_IN_ICD(icd_codes = NULL, years, usrds_ids = NULL)"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_ICD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve diagnosis codes from Institutional claims — get_IN_ICD","text":"icd_codes Optional. Character vector ICD diagnosis codes (without periods). NULL (default), returns diagnosis claims selected years (USRDS_IDs, specified). years Integer vector calendar years include. usrds_ids Optional. Vector USRDS_IDs restrict output specific patients.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_ICD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve diagnosis codes from Institutional claims — get_IN_ICD","text":"data frame columns: USRDS_ID, CODE, CLM_FROM.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_IN_ICD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve diagnosis codes from Institutional claims — get_IN_ICD","text":"","code":"if (FALSE) { # \\dontrun{ # ICD-9 and ICD-10 codes for Cryptococcosis (no periods) cryptococcus_icd <- c(\"1175\", \"B45\")  # Retrieve claims for all patients in selected years result <- get_IN_ICD(icd_codes = cryptococcus_icd, years = 2013:2018)  # Retrieve all diagnosis claims for selected patients result_all <- get_IN_ICD(icd_codes = NULL, years = 2015, usrds_ids = c(100000001, 100000002)) } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_HCPCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve HCPCS codes from Physician/Supplier claims — get_PS_HCPCS","title":"Retrieve HCPCS codes from Physician/Supplier claims — get_PS_HCPCS","text":"Extracts claims physician/supplier billing data selected years, optionally filtering HCPCS codes /USRDS_IDs.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_HCPCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve HCPCS codes from Physician/Supplier claims — get_PS_HCPCS","text":"","code":"get_PS_HCPCS(hcpcs_codes = NULL, years, usrds_ids = NULL)"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_HCPCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve HCPCS codes from Physician/Supplier claims — get_PS_HCPCS","text":"hcpcs_codes Optional. Character vector HCPCS codes filter . NULL, returns codes. years Integer vector calendar years include. usrds_ids Optional. Vector USRDS_IDs restrict results .","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_HCPCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve HCPCS codes from Physician/Supplier claims — get_PS_HCPCS","text":"data frame columns: USRDS_ID, HCPCS, CLM_FROM","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_HCPCS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve HCPCS codes from Physician/Supplier claims — get_PS_HCPCS","text":"hcpcs_codes NULL, HCPCS-coded claims returned.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_HCPCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve HCPCS codes from Physician/Supplier claims — get_PS_HCPCS","text":"","code":"if (FALSE) { # \\dontrun{ get_PS_HCPCS(c(\"81003\", \"87086\"), years = 2006:2008) get_PS_HCPCS(NULL, years = 2006:2008)  # All HCPCS codes } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_ICD.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve diagnosis claims from Physician/Supplier files by ICD code — get_PS_ICD","title":"Retrieve diagnosis claims from Physician/Supplier files by ICD code — get_PS_ICD","text":"Extracts diagnosis-level claims USRDS Physician/Supplier (PS) billing files selected years filters specified ICD-9 ICD-10 codes /USRDS_IDs. function supports input files Parquet, CSV, SAS format automatically identifies loads correct files year using internal USRDS file list.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_ICD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve diagnosis claims from Physician/Supplier files by ICD code — get_PS_ICD","text":"","code":"get_PS_ICD(icd_codes = NULL, years, usrds_ids = NULL)"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_ICD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve diagnosis claims from Physician/Supplier files by ICD code — get_PS_ICD","text":"icd_codes Optional. Character vector ICD-9/10 diagnosis codes (without periods). NULL, returns diagnosis claims selected years (filtered usrds_ids, specified). years Integer vector calendar years include. Must match available years PS ICD file index. usrds_ids Optional. Vector USRDS_IDs filter data specific patients.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_ICD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve diagnosis claims from Physician/Supplier files by ICD code — get_PS_ICD","text":"data frame one row per diagnosis claim, containing: USRDS_ID Patient ID DIAG ICD diagnosis code (character) CLM_FROM Claim start date (Date) CLM_THRU Claim end date (Date)","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_ICD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve diagnosis claims from Physician/Supplier files by ICD code — get_PS_ICD","text":"Parquet files used, filtering ICD code USRDS_ID applied collection improved performance. CSV SAS files, filtering occurs reading file memory. icd_codes NULL, diagnosis claims specified years (optionally, specific USRDS_IDs) returned.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_ICD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve diagnosis claims from Physician/Supplier files by ICD code — get_PS_ICD","text":"","code":"if (FALSE) { # \\dontrun{ # Get all Cryptococcosis-related diagnosis claims from 2013–2018 cryptococcus_icd <- c(\"1175\", \"B45\") result <- get_PS_ICD(icd_codes = cryptococcus_icd, years = 2013:2018)  # Return all diagnosis claims for selected patients in 2016–2017 result_all <- get_PS_ICD(   icd_codes = NULL,   years = c(2016, 2017),   usrds_ids = c(100012345, 100078901) ) } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_specialty.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract PS specialty claims — get_PS_specialty","title":"Extract PS specialty claims — get_PS_specialty","text":"Returns claims filtered specialty code PS HCPCS dataset.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_specialty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract PS specialty claims — get_PS_specialty","text":"","code":"get_PS_specialty(   specialtycodelist,   yearlist,   DIAG = FALSE,   HCPCS = FALSE,   PLCSRV = FALSE )"},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_specialty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract PS specialty claims — get_PS_specialty","text":"specialtycodelist vector specialty codes keep. yearlist vector years include. DIAG Logical, include DIAG column. HCPCS Logical, include HCPCS column. PLCSRV Logical, include PLCSRV column.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/get_PS_specialty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract PS specialty claims — get_PS_specialty","text":"tibble filtered selected PS HCPCS data.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/load_usrds_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a USRDS file and optionally apply labels — load_usrds_file","title":"Load a USRDS file and optionally apply labels — load_usrds_file","text":"function loads USRDS data file using internal registry optionally applies: Factor labels using format definitions Appendix C Variable labels using descriptions Appendix B","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/load_usrds_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a USRDS file and optionally apply labels — load_usrds_file","text":"","code":"load_usrds_file(   file_key,   factor_labels = TRUE,   var_labels = FALSE,   usrds_ids = NULL,   col_select = NULL,   ... )"},{"path":"https://vagishhemmige.github.io/usRds/reference/load_usrds_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a USRDS file and optionally apply labels — load_usrds_file","text":"file_key Character. File key (e.g., \"PATIENTS\", \"RXHIST\"). Case-insensitive match registered file names. factor_labels Logical. Whether apply factor labels (Appendix C). Default = TRUE. var_labels Logical. Whether apply variable labels (Appendix B). Default = FALSE. usrds_ids Optional. vector USRDS_IDs retain file. applied file contains USRDS_ID column. col_select Optional. character vector tidyselect expression selecting columns load. ... Additional arguments passed file reader (e.g., as_factor read_sas)","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/load_usrds_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a USRDS file and optionally apply labels — load_usrds_file","text":"tibble contents selected file, optionally labeled factors variable descriptions.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/load_usrds_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a USRDS file and optionally apply labels — load_usrds_file","text":"variable names standardized uppercase loading. col_select supports tidyselect syntax CSV SAS files, also available Parquet files (resolved automatically column names).","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/load_usrds_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a USRDS file and optionally apply labels — load_usrds_file","text":"","code":"if (FALSE) { # \\dontrun{ # Load the PATIENTS file and apply factor labels (Appendix C) df <- load_usrds_file(\"PATIENTS\", factor_labels = TRUE)  # Load the RXHIST file with both factor and variable labels df <- load_usrds_file(\"RXHIST\", factor_labels = TRUE, var_labels = TRUE)  # Select only columns starting with \"CD\" (works for all file types) df <- load_usrds_file(\"PATIENTS\", col_select = dplyr::starts_with(\"CD\"))  # Load only specific columns by name df <- load_usrds_file(\"PATIENTS\", col_select = c(\"USRDS_ID\", \"CDEATH\"))  # Filter to a subset of USRDS_IDs df <- load_usrds_file(\"RXHIST\", usrds_ids = c(\"100000123\", \"100000456\")) } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/set_USRDS_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the USRDS working directory — set_USRDS_wd","title":"Set the USRDS working directory — set_USRDS_wd","text":"Sets USRDS working directory current session, optionally saves permanently user's .Renviron file environment variable USRDS_WD.","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/set_USRDS_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the USRDS working directory — set_USRDS_wd","text":"","code":"set_USRDS_wd(path, permanent = FALSE)"},{"path":"https://vagishhemmige.github.io/usRds/reference/set_USRDS_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the USRDS working directory — set_USRDS_wd","text":"path Path USRDS data folder permanent Logical; TRUE, appends setting .Renviron persistence","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/set_USRDS_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the USRDS working directory — set_USRDS_wd","text":"normalized path, invisibly","code":""},{"path":"https://vagishhemmige.github.io/usRds/reference/set_USRDS_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the USRDS working directory — set_USRDS_wd","text":"","code":"if (FALSE) { # \\dontrun{ set_USRDS_wd(\"C:/Data/USRDS\")          # Session only set_USRDS_wd(\"C:/Data/USRDS\", TRUE)    # Persistent across sessions } # }"},{"path":"https://vagishhemmige.github.io/usRds/reference/usRds-package.html","id":null,"dir":"Reference","previous_headings":"","what":"usRds: A Package to Automate Processing and Access to the USRDS — usRds-package","title":"usRds: A Package to Automate Processing and Access to the USRDS — usRds-package","text":"Provides tools simplify access processing data United States Renal Data System (USRDS). Supports multiple raw formats (SAS, CSV, Parquet), automated file detection, optional value variable labeling using USRDS appendices, functions filter claims data diagnosis procedure codes. Designed reproducible, large-scale cohort construction longitudinal analysis.","code":""},{"path":[]},{"path":"https://vagishhemmige.github.io/usRds/reference/usRds-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"usRds: A Package to Automate Processing and Access to the USRDS — usRds-package","text":"Maintainer: Vagish Hemmige vahemmig@montefiore.org contributors: Cervera Hernandez Miguel Miguel.Cerverahernandez@SanfordHealth.org [contributor]","code":""}]
